[{"content":"为啥要整这个 我在使用学术 GPT 进行原文翻译的时候, 发现中文版偶尔会有乱码, 而且是凭空占一页(把该页正常的翻译内容挤到下一页去了), 这样导致对比版内容对不上.\n如何解决? 我用了比较笨的办法, 把单独的翻译版 pdf 拿出来, 手动删除错误页, 然后手动把原版和翻译版拼接起来, 形成像学术 GPT 那样的 comparison版本, 但是怎么做到呢? 我用了一点 LaTeX 的技术\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \\documentclass{article} \\usepackage[utf8]{inputenc} \\usepackage{pdfpages} \\usepackage{forloop} \\begin{document} \\newcounter{x} \\forloop{x}{1}{\\value{x} \u0026lt; 23}{ \\includepdfmerge[nup=1x2, landscape]{RCNN-en.pdf, \\arabic{x}, RCNN-zh.pdf, \\arabic{x}} } \\forloop{x}{23}{\\value{x} \u0026lt; 26}{ \\includepdfmerge[nup=1x2, landscape]{RCNN-en.pdf, \\arabic{x}} } \\end{document} 主要就是使用 pdfpages 包, 英文版有 25 页, 中文版有 22 页, 第一个 loop 就是一页一页放上去, 第二个 loop 是把英文版剩下的 3 页放上去\n","date":"2024-06-07T23:48:45+08:00","permalink":"http://localhost:1313/post/aca-translation/","title":"论文翻译版和原版合成同页对比版pdf"},{"content":"前言 阅读本文前应该已经了解git的使用,基本命令行操作, 且已经安装了Hugo\n由于网络上众多文章发布时间较早, Hugo 和GitHub 产生了部分更新导致有一定出入,遂为此文\n本文精简了官方文档的可选操作,故每一步基本都是必要操作\nGitHub 相关操作 首先新建名为 username.github.io 的repo, username 必须为你的 GitHub 用户名, 不得有误\n到GitHub-\u0026gt;Settings-\u0026gt;Developer settings-\u0026gt;Personal access token-\u0026gt;Tokens(classic)生成access token\n注意: access token仅会展示一次,一定要保存到本地\n2023年某月开始GitHub不再允许通过username和password进行git push, 转为使用username和access token.\nHugo 本地仓库 新建文件夹 reponame 并 cd 进入(后续将该目录简称为repo), 然后 hugo new site sitename, sitename 随意. 进行git init初始化\n安装主题(theme) 1 git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke 此时在repo/themes下会出现一个名为ananke的文件夹\n修改配置(hugo.toml) 打开repo/hugo.toml(若无则新建), 注意: 在2023.2 Hugo官方将config.toml迁移到了hugo.toml, 故网络上的文章提到的config.toml 现在即为hugo.toml.\n1 2 3 4 baseURL = \u0026#39;https://username.github.io\u0026#39; languageCode = \u0026#39;zh-CN\u0026#39; title = \u0026#34;Choose a name by yourself\u0026#34; theme = \u0026#39;ananke\u0026#39; 新建一条post 1 hugo new content post/newpost.md 注意: 虽然Hugo官方doc给的是 posts/newpost.md 但是(部分/大部分?)主题并不识别 posts 而是 post\n此时会在repo/content/post下创建文件,修改该.md文件. 文件开头被加号包起来的东西叫作 frontmatter\n注意: 记得修改draft 或者 date, 否则等下部署的时候也不会出现任何post\n本地部署测试 1 hugo server 然后打开浏览器访问http://localhost:1313.\nhugo或hugo server都会查看repo/content/post下的文件,然后在repo/public下生成相应的.html\n本地进行git commit\n部署到GitHub GitHub操作 到你username.github.io下, Settings-\u0026gt;Pages, 找到Build and Deployment, 将Source从Deploy from a branch改为GitHub Actions\n本地操作 新建repo/.github/workflows/hugo.yaml,填入下面的内容\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 # Sample workflow for building and deploying a Hugo site to GitHub Pages name: Deploy Hugo site to Pages on: # Runs on pushes targeting the default branch push: branches: - main # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued. # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete. concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: false # Default to bash defaults: run: shell: bash jobs: # Build job build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.124.0 steps: - name: Install Hugo CLI run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026amp;\u0026amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Install Dart Sass run: sudo snap install dart-sass - name: Checkout uses: actions/checkout@v4 with: submodules: recursive fetch-depth: 0 - name: Setup Pages id: pages uses: actions/configure-pages@v4 - name: Install Node.js dependencies run: \u0026#34;[[ -f package-lock.json || -f npm-shrinkwrap.json ]] \u0026amp;\u0026amp; npm ci || true\u0026#34; - name: Build with Hugo env: # For maximum backward compatibility with Hugo modules HUGO_ENVIRONMENT: production HUGO_ENV: production run: | hugo \\ --gc \\ --minify \\ --baseURL \u0026#34;${{ steps.pages.outputs.base_url }}/\u0026#34; - name: Upload artifact uses: actions/upload-pages-artifact@v3 with: path: ./public # Deployment job deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 记得修改上面的hugo version(好像不改也没事)\n添加远程仓库, origin作为别名(当然也可以用别的奇怪的别名,origin只是一种范例而非关键字)\n1 git remote add origin https://github.io/username.github.io 推送到远程仓库\n1 git push origin main 会弹出来验证信息,要求输入用户名和密码(名义上是密码,但是应该输入access token, 如果输入密码会提示使用密码验证已经不再支持)\n为什么本地测试没有post显示? 可能有以下几种情况: (post 指代repo/content/post/yourpost.md)\npost的frontmatter中的date是明天 post中draft=true, 应改为 draft=false. 或者采用hugo server -D 也可将草稿内容部署到网站 你使用了hugo new content posts/post.md 而非 hugo new content post/post.md, 主题可能是寻找post文件夹而非posts文件夹生成.html文件的(Hugo官方doc和theme总有一种脱节的美). 或者到theme文件夹里修改config.yaml 将 mainSections 改成 posts ","date":"2024-03-20T15:58:10+08:00","permalink":"http://localhost:1313/post/hugo-setup/","title":"Hugo GitHub主页搭建与踩坑记"},{"content":"Hello World! This is a test post of hugo.\nLet\u0026rsquo;s try some math input $$ \\sum_{k=0}^{\\infty} \\frac{1}{k!} = \\mathrm{e} $$\n","date":"2024-03-13T21:12:04+08:00","permalink":"http://localhost:1313/post/post-test/","title":"Test Post"}]